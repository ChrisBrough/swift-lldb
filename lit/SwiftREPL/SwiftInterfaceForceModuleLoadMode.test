// This test checks that the value of the symbols.swift-module-loading-mode
// setting is respected when loading Swift modules.

// TODO(TF-493): Re-enable
// RUN: echo "disabled"
// UN: rm -rf %t && mkdir %t

// Setup generates a dylib and .swiftinterface for A.swift as is, but generates
// the .swiftmodule from a modified version a A.swift where the 'FromInterface'
// type has been renamed to 'FromSerialized'. This means that the 'testValue'
// variable will have a different type depending on whether the module was
// loaded via the .swiftinterface or .swiftmodule.

// UN: mkdir %t/mcp
// UN: mkdir %t/lib
// UN: cp %S/Inputs/A.swift %t/AA.swift
// UN: %target-swiftc -module-name AA -emit-parseable-module-interface-path %t/lib/AA.swiftinterface -emit-library -o %t/lib/libAA%target-shared-library-suffix %t/AA.swift
// UN: sed -e 's/FromInterface/FromSerialized/g' %t/AA.swift | %target-swiftc -module-name AA -emit-module -o %t/lib/AA.swiftmodule -
// UN: rm %t/AA.swift


// This is the input provided to lldb. It intentionally assigns 'testValue' to
// a variable of the incorrect type so we can tell via the produced diagnostic
// whether the .swiftinterface or .swiftmodule was used.

import AA

let x: OtherType = testValue
// NOT-LOADED: use of undeclared type 'OtherType'
// FROM-INTERFACE: cannot convert value of type 'FromInterface' to specified type 'OtherType'
// FROM-SERIALIZED: cannot convert value of type 'FromSerialized' to specified type 'OtherType'
// INVALID: error: invalid enumeration value '{{.*}}', valid values are: {{.*}}


// 1. Neither .swiftinterface or .swiftmodule present
//
// UN: mv %t/lib %t/lib-backup
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode prefer-parseable" < %s 2>&1 | FileCheck %s -check-prefix=NOT-LOADED
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode prefer-serialized" < %s 2>&1 | FileCheck %s -check-prefix=NOT-LOADED
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode only-parseable" < %s 2>&1 | FileCheck %s -check-prefix=NOT-LOADED
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode only-serialized" < %s 2>&1 | FileCheck %s -check-prefix=NOT-LOADED

// 2. .swiftinterface only
//
// UN: mkdir %t/lib
// UN: cp %t/lib-backup/AA.swiftinterface %t/lib/
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode prefer-parseable" < %s 2>&1 | FileCheck %s -check-prefix=FROM-INTERFACE
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode prefer-serialized" < %s 2>&1 | FileCheck %s -check-prefix=FROM-INTERFACE
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode only-parseable" < %s 2>&1 | FileCheck %s -check-prefix=FROM-INTERFACE
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode only-serialized" < %s 2>&1 | FileCheck %s -check-prefix=NOT-LOADED

// 3. .swiftinterface and .swiftmodule
//
// UN: cp %t/lib-backup/AA.swiftmodule %t/lib/
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode prefer-parseable" < %s 2>&1 | FileCheck %s -check-prefix=FROM-INTERFACE
// UN: rm -rf %t/mcp/AA*
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode prefer-serialized" < %s 2>&1 | FileCheck %s -check-prefix=FROM-SERIALIZED
// UN: rm -rf %t/mcp/AA*
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode only-parseable" < %s 2>&1 | FileCheck %s -check-prefix=FROM-INTERFACE
// UN: rm -rf %t/mcp/AA*
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode only-serialized" < %s 2>&1 | FileCheck %s -check-prefix=FROM-SERIALIZED
// UN: rm -rf %t/mcp/AA*

// 4. .swiftmodule only
// UN: rm %t/lib/AA.swiftinterface
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode prefer-parseable" < %s 2>&1 | FileCheck %s -check-prefix=FROM-SERIALIZED
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode prefer-serialized" < %s 2>&1 | FileCheck %s -check-prefix=FROM-SERIALIZED
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode only-parseable" < %s 2>&1 | FileCheck %s -check-prefix=NOT-LOADED
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode only-serialized" < %s 2>&1 | FileCheck %s -check-prefix=FROM-SERIALIZED

// 5. Check invalid values are rejected
// UN: %lldb --repl="-I%t/lib -L%t/lib -lAA" -O "settings set symbols.clang-modules-cache-path %t/mcp" \
// UN:   -O "settings set symbols.swift-module-loading-mode garbage" < %s 2>&1 | FileCheck %s -check-prefix=INVALID
